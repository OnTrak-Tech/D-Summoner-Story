/**
 * ShareModal component for social media sharing with preview image generation.
 * Supports Twitter, Facebook, Discord, and copy-to-clipboard functionality.
 */

import React, { useState, useRef, useEffect } from "react";
import { RecapData } from "../services/api";

interface ShareModalProps {
  isOpen: boolean;
  onClose: () => void;
  recapData: RecapData;
  shareUrl?: string;
}

interface SharePlatform {
  name: string;
  icon: string;
  color: string;
  url: (text: string, url: string) => string;
}

const SHARE_PLATFORMS: SharePlatform[] = [
  {
    name: "Twitter",
    icon: "üê¶",
    color: "bg-blue-500 hover:bg-blue-600",
    url: (text, url) =>
      `https://twitter.com/intent/tweet?text=${encodeURIComponent(
        text
      )}&url=${encodeURIComponent(url)}`,
  },
  {
    name: "Facebook",
    icon: "üìò",
    color: "bg-blue-700 hover:bg-blue-800",
    url: (text, url) =>
      `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
        url
      )}&quote=${encodeURIComponent(text)}`,
  },
  {
    name: "Discord",
    icon: "üí¨",
    color: "bg-indigo-600 hover:bg-indigo-700",
    url: (text, url) =>
      `https://discord.com/channels/@me?message=${encodeURIComponent(
        `${text} ${url}`
      )}`,
  },
  {
    name: "Reddit",
    icon: "üî¥",
    color: "bg-orange-600 hover:bg-orange-700",
    url: (text, url) =>
      `https://reddit.com/submit?title=${encodeURIComponent(
        text
      )}&url=${encodeURIComponent(url)}`,
  },
];

export const ShareModal: React.FC<ShareModalProps> = ({
  isOpen,
  onClose,
  recapData,
  shareUrl,
}) => {
  const [copied, setCopied] = useState(false);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Generate share text
  const generateShareText = () => {
    const { summoner_name, statistics } = recapData;
    return `üéÆ Check out ${summoner_name}'s League of Legends Year in Review! ${statistics.win_rate.toFixed(
      1
    )}% win rate with ${statistics.avg_kda.toFixed(2)} KDA across ${
      statistics.total_games
    } games! üèÜ`;
  };

  const shareText = generateShareText();
  const finalShareUrl = shareUrl || window.location.href;

  // Generate preview image using Canvas
  const generatePreviewImage = async () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Set canvas size
    canvas.width = 1200;
    canvas.height = 630; // Twitter card dimensions

    // Background gradient
    const gradient = ctx.createLinearGradient(
      0,
      0,
      canvas.width,
      canvas.height
    );
    gradient.addColorStop(0, "#3B82F6");
    gradient.addColorStop(1, "#8B5CF6");
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Add pattern overlay
    ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
    for (let i = 0; i < canvas.width; i += 40) {
      for (let j = 0; j < canvas.height; j += 40) {
        if ((i + j) % 80 === 0) {
          ctx.fillRect(i, j, 20, 20);
        }
      }
    }

    // Title
    ctx.fillStyle = "#FFFFFF";
    ctx.font = "bold 48px Arial, sans-serif";
    ctx.textAlign = "center";
    ctx.fillText("League of Legends", canvas.width / 2, 100);

    ctx.font = "bold 36px Arial, sans-serif";
    ctx.fillText("Year in Review", canvas.width / 2, 150);

    // Summoner name
    ctx.font = "bold 42px Arial, sans-serif";
    ctx.fillStyle = "#FEF3C7";
    ctx.fillText(recapData.summoner_name, canvas.width / 2, 220);

    // Stats boxes
    const stats = [
      {
        label: "Games",
        value: recapData.statistics.total_games.toString(),
        x: 200,
      },
      {
        label: "Win Rate",
        value: `${recapData.statistics.win_rate.toFixed(1)}%`,
        x: 400,
      },
      {
        label: "Avg KDA",
        value: recapData.statistics.avg_kda.toFixed(2),
        x: 600,
      },
      { label: "Region", value: recapData.region.toUpperCase(), x: 800 },
    ];

    stats.forEach((stat, index) => {
      const x = 150 + index * 225;
      const y = 320;

      // Stat box background
      ctx.fillStyle = "rgba(255, 255, 255, 0.2)";
      ctx.fillRect(x, y, 200, 120);

      // Stat value
      ctx.fillStyle = "#FFFFFF";
      ctx.font = "bold 32px Arial, sans-serif";
      ctx.textAlign = "center";
      ctx.fillText(stat.value, x + 100, y + 50);

      // Stat label
      ctx.font = "18px Arial, sans-serif";
      ctx.fillStyle = "#E5E7EB";
      ctx.fillText(stat.label, x + 100, y + 80);
    });

    // Footer
    ctx.fillStyle = "#E5E7EB";
    ctx.font = "20px Arial, sans-serif";
    ctx.textAlign = "center";
    ctx.fillText("Generated by D-Summoner-Story", canvas.width / 2, 580);

    // Convert to data URL
    const dataUrl = canvas.toDataURL("image/png");
    setPreviewImage(dataUrl);
  };

  useEffect(() => {
    if (isOpen) {
      generatePreviewImage();
    }
  }, [isOpen, recapData]);

  const handleShare = (platform: SharePlatform) => {
    const url = platform.url(shareText, finalShareUrl);
    window.open(url, "_blank", "width=600,height=400");
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(finalShareUrl);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy link:", error);
      // Fallback for older browsers
      const textArea = document.createElement("textarea");
      textArea.value = finalShareUrl;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleCopyText = async () => {
    try {
      await navigator.clipboard.writeText(`${shareText} ${finalShareUrl}`);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy text:", error);
    }
  };

  const handleDownloadImage = () => {
    if (!previewImage) return;

    const link = document.createElement("a");
    link.download = `${recapData.summoner_name}-year-in-review.png`;
    link.href = previewImage;
    link.click();
  };

  const handleNativeShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `${recapData.summoner_name}'s League of Legends Year in Review`,
          text: shareText,
          url: finalShareUrl,
        });
      } catch (error) {
        console.error("Native sharing failed:", error);
      }
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-2xl font-bold text-gray-900">
            üì§ Share Your Year in Review
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 text-2xl"
          >
            √ó
          </button>
        </div>

        <div className="p-6 space-y-6">
          {/* Preview Image */}
          {previewImage && (
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-3">
                üñºÔ∏è Share Preview
              </h3>
              <img
                src={previewImage}
                alt="Share preview"
                className="max-w-full h-auto rounded-lg shadow-lg border"
              />
              <button
                onClick={handleDownloadImage}
                className="mt-3 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                üì• Download Image
              </button>
            </div>
          )}

          {/* Share Text */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-3">
              üìù Share Text
            </h3>
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
              <p className="text-gray-800 mb-3">{shareText}</p>
              <div className="flex gap-2">
                <button
                  onClick={handleCopyText}
                  className={`px-3 py-1 rounded text-sm transition-colors ${
                    copied
                      ? "bg-green-100 text-green-800"
                      : "bg-blue-100 text-blue-800 hover:bg-blue-200"
                  }`}
                >
                  {copied ? "‚úÖ Copied!" : "üìã Copy Text"}
                </button>
              </div>
            </div>
          </div>

          {/* Share Platforms */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-3">
              üåê Share On
            </h3>
            <div className="grid grid-cols-2 gap-3">
              {SHARE_PLATFORMS.map((platform) => (
                <button
                  key={platform.name}
                  onClick={() => handleShare(platform)}
                  className={`flex items-center justify-center gap-2 py-3 px-4 rounded-lg text-white font-medium transition-colors ${platform.color}`}
                >
                  <span className="text-xl">{platform.icon}</span>
                  {platform.name}
                </button>
              ))}
            </div>
          </div>

          {/* Native Share (Mobile) */}
          {navigator.share && (
            <div>
              <button
                onClick={handleNativeShare}
                className="w-full py-3 px-4 bg-gray-800 text-white rounded-lg font-medium hover:bg-gray-900 transition-colors flex items-center justify-center gap-2"
              >
                <span className="text-xl">üì±</span>
                Share via Device
              </button>
            </div>
          )}

          {/* Copy Link */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-3">
              üîó Direct Link
            </h3>
            <div className="flex gap-2">
              <input
                type="text"
                value={finalShareUrl}
                readOnly
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-700"
              />
              <button
                onClick={handleCopyLink}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  copied
                    ? "bg-green-500 text-white"
                    : "bg-blue-500 text-white hover:bg-blue-600"
                }`}
              >
                {copied ? "‚úÖ" : "üìã"}
              </button>
            </div>
          </div>

          {/* Tips */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-900 mb-2">
              üí° Sharing Tips
            </h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>
                ‚Ä¢ Download the image to share on Instagram or other platforms
              </li>
              <li>‚Ä¢ Use the copy text button to customize your message</li>
              <li>‚Ä¢ Share your achievements with your League friends!</li>
            </ul>
          </div>
        </div>

        {/* Hidden canvas for image generation */}
        <canvas
          ref={canvasRef}
          style={{ display: "none" }}
          width={1200}
          height={630}
        />
      </div>
    </div>
  );
};
