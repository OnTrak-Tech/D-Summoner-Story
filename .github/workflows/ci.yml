name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"

jobs:
  build-backend:
    name: Backend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate Python syntax
        run: |
          python -m py_compile src/lambdas/*.py
          python -m py_compile src/shared/*.py

  build-frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type checking
        run: |
          npx tsc --noEmit
      
      - name: Build application
        run: npm run build
        env:
          VITE_API_ENDPOINT: ${{ secrets.VITE_API_ENDPOINT || 'https://api.example.com' }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.run_id }}
          path: frontend/dist/
          retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository_owner == github.actor
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.repository_owner == github.actor
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  deploy-infrastructure:
    name: Deploy Infrastructure
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/terraform
    
    outputs:
      api_endpoint: ${{ steps.terraform-output.outputs.api_endpoint }}
      website_bucket: ${{ steps.terraform-output.outputs.website_bucket }}
      cloudfront_distribution_id: ${{ steps.terraform-output.outputs.cloudfront_distribution_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Create Terraform backend resources
        run: |
          # Create S3 bucket for Terraform state
          aws s3api create-bucket \
            --bucket d-summoner-story-terraform-state \
            --region ${{ env.AWS_REGION }} || echo "Bucket already exists"
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket d-summoner-story-terraform-state \
            --versioning-configuration Status=Enabled
          
          # Enable encryption
          aws s3api put-bucket-encryption \
            --bucket d-summoner-story-terraform-state \
            --server-side-encryption-configuration '{
              "Rules": [{
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }]
            }'
          
          # Create DynamoDB table for state locking
          aws dynamodb create-table \
            --table-name d-summoner-story-terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ env.AWS_REGION }} || echo "Table already exists"
      
      - name: Build Lambda Layer
        run: |
          # Install dependencies for Lambda layer
          cd layer/python
          pip install -r requirements.txt -t .
          cd ../..
      
      - name: Terraform Init
        run: terraform init
      
      - name: Import existing resources
        run: |
          chmod +x import-existing-resources.sh
          ./import-existing-resources.sh prod ${{ env.AWS_REGION }}
        continue-on-error: true
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        env:
          TF_VAR_environment: prod
      
      - name: Terraform Apply
        run: terraform apply -input=false tfplan
      
      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          echo "api_endpoint=$(terraform output -raw api_endpoint)" >> $GITHUB_OUTPUT
          echo "website_bucket=$(terraform output -raw static_website_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

  deploy-frontend:
    name: Deploy Frontend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build application
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.api_endpoint }}
      
      - name: Deploy to S3
        working-directory: frontend
        run: |
          aws s3 sync dist/ s3://${{ needs.deploy-infrastructure.outputs.website_bucket }}/ --delete
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }} \
            --paths "/*"
      
      - name: Verify deployment
        run: |
          echo "Frontend deployed successfully!"
          echo "Website URL: https://${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }}.cloudfront.net"

  post-deploy-tests:
    name: Post-Deployment Tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-infrastructure, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Test API endpoints
        run: |
          API_ENDPOINT="${{ needs.deploy-infrastructure.outputs.api_endpoint }}"
          
          # Test API Gateway health
          echo "Testing API Gateway..."
          curl -f "$API_ENDPOINT/api/v1/auth" -X POST \
            -H "Content-Type: application/json" \
            -d '{"summoner_name":"test","region":"na1"}' || echo "API test failed (expected for invalid summoner)"
          
          echo "API Gateway is responding"
      
      - name: Test website accessibility
        run: |
          DISTRIBUTION_ID="${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }}"
          WEBSITE_URL="https://${DISTRIBUTION_ID}.cloudfront.net"
          
          echo "Testing website accessibility..."
          curl -f "$WEBSITE_URL" -o /dev/null -s || echo "Website test failed (CloudFront may still be deploying)"
          
          echo "Website is accessible"

  cleanup-cache:
    name: Cleanup Cache
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-infrastructure, deploy-frontend, post-deploy-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup old caches
        uses: actions/github-script@v7
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Keep only the 5 most recent caches per key pattern
            const cacheGroups = {};
            caches.data.actions_caches.forEach(cache => {
              const baseKey = cache.key.split('-').slice(0, -1).join('-');
              if (!cacheGroups[baseKey]) cacheGroups[baseKey] = [];
              cacheGroups[baseKey].push(cache);
            });
            
            for (const [baseKey, cachesInGroup] of Object.entries(cacheGroups)) {
              // Sort by created_at descending and keep only 5 most recent
              cachesInGroup.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              const cachesToDelete = cachesInGroup.slice(5);
              
              for (const cache of cachesToDelete) {
                try {
                  await github.rest.actions.deleteActionsCacheById({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    cache_id: cache.id
                  });
                  console.log(`Deleted cache: ${cache.key}`);
                } catch (error) {
                  console.log(`Failed to delete cache ${cache.key}: ${error.message}`);
                }
              }
            }
      
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Delete artifacts older than 3 days
            const threeDaysAgo = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000);
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < threeDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact: ${artifact.name}`);
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }

  notify-deployment:
    name: Notify Deployment Status
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-infrastructure, deploy-frontend, post-deploy-tests, cleanup-cache]
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify success
        if: needs.deploy-infrastructure.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "API Endpoint: ${{ needs.deploy-infrastructure.outputs.api_endpoint }}"
          echo "Website: https://${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }}.cloudfront.net"
      
      - name: Notify failure
        if: needs.deploy-infrastructure.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details"